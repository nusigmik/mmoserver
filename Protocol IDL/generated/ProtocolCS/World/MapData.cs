// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtocolCS.World
{

using global::System;
using global::FlatBuffers;

public struct MapData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MapData GetRootAsMapData(ByteBuffer _bb) { return GetRootAsMapData(_bb, new MapData()); }
  public static MapData GetRootAsMapData(ByteBuffer _bb, MapData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MapData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EntityId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEntityIdBytes() { return __p.__vector_as_arraysegment(4); }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateMapId(int map_id) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, map_id); return true; } else { return false; } }
  public ProtocolCS.MapType MapType { get { int o = __p.__offset(8); return o != 0 ? (ProtocolCS.MapType)__p.bb.GetInt(o + __p.bb_pos) : ProtocolCS.MapType.NONE; } }
  public bool MutateMapType(ProtocolCS.MapType map_type) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, (int)map_type); return true; } else { return false; } }
  public GateInfo? MapGates(int j) { int o = __p.__offset(10); return o != 0 ? (GateInfo?)(new GateInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MapGatesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MapData> CreateMapData(FlatBufferBuilder builder,
      StringOffset entity_idOffset = default(StringOffset),
      int map_id = 0,
      ProtocolCS.MapType map_type = ProtocolCS.MapType.NONE,
      VectorOffset map_gatesOffset = default(VectorOffset)) {
    builder.StartObject(4);
    MapData.AddMapGates(builder, map_gatesOffset);
    MapData.AddMapType(builder, map_type);
    MapData.AddMapId(builder, map_id);
    MapData.AddEntityId(builder, entity_idOffset);
    return MapData.EndMapData(builder);
  }

  public static void StartMapData(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddEntityId(FlatBufferBuilder builder, StringOffset entityIdOffset) { builder.AddOffset(0, entityIdOffset.Value, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(1, mapId, 0); }
  public static void AddMapType(FlatBufferBuilder builder, ProtocolCS.MapType mapType) { builder.AddInt(2, (int)mapType, 0); }
  public static void AddMapGates(FlatBufferBuilder builder, VectorOffset mapGatesOffset) { builder.AddOffset(3, mapGatesOffset.Value, 0); }
  public static VectorOffset CreateMapGatesVector(FlatBufferBuilder builder, Offset<GateInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMapGatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MapData> EndMapData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MapData>(o);
  }
};


}
